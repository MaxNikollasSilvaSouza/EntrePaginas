// Importa√ß√µes necess√°rias do Angular
import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';
import { provideRouter } from '@angular/router';
import { provideClientHydration, withEventReplay } from '@angular/platform-browser';

// Importa√ß√£o do arquivo de rotas
import { routes } from './app.routes';

// Defini√ß√£o da configura√ß√£o principal da aplica√ß√£o
export const appConfig: ApplicationConfig = {
  providers: [
    /**
     * üîπ Otimiza a detec√ß√£o de mudan√ßas do Angular.
     * - `eventCoalescing: true` agrupa m√∫ltiplos eventos antes de process√°-los.
     * - Isso reduz o n√∫mero de verifica√ß√µes do Angular, melhorando a performance.
     */
    provideZoneChangeDetection({ eventCoalescing: true }),

    /**
     * üîπ Define o roteamento da aplica√ß√£o.
     * - `provideRouter(routes)` registra as rotas definidas no `app.routes.ts`.
     * - Isso permite a navega√ß√£o entre p√°ginas no Angular.
     */
    provideRouter(routes),

    /**
     * üîπ Ativa a hidrata√ß√£o do lado do cliente (usado em SSR).
     * - O SSR (Server-Side Rendering) renderiza a p√°gina no servidor antes de envi√°-la ao cliente.
     * - `provideClientHydration()` permite que o Angular reutilize essa renderiza√ß√£o no navegador.
     * - `withEventReplay()` salva eventos (como cliques e scrolls) antes da hidrata√ß√£o e os reaplica depois.
     * - Isso evita que intera√ß√µes do usu√°rio sejam perdidas durante a transi√ß√£o do SSR para o cliente.
     */
    provideClientHydration(withEventReplay())
  ]
};
